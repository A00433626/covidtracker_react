{"version":3,"sources":["InfoCard.jsx","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoCard","title","cases","total","active","isRed","props","console","log","Card","onClick","className","Body","Text","Table","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","key","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","state","mapCenter","lng","mapZoom","countryCode","caseType","mapCountries","tableData","getCountriesInfo","fetch","then","response","json","setState","getCountries","name","value","iso2","onCountryChange","e","target","this","Form","Group","controlId","Control","as","onChange","todayCases","todayRecovered","todayDeaths","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6472246c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InfoCard.css\";\r\nimport { Card } from \"react-bootstrap\";\r\nconst InfoCard = ({ title, cases, total, active, isRed, ...props }) => {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <Card.Body>\r\n        <Card.Text className=\"gutterBottom\">{title}</Card.Text>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Card.Text className=\"infoBox__total\">Total {total}</Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoCard;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  console.log(countries);\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country, index) => (\r\n        <tr key={index}>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      key={country}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap key={countries} center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport { Form, Card } from \"react-bootstrap\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport Table from \"./Table\";\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport numeral from \"numeral\";\r\nimport Map from \"./Map\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nclass App extends Component {\r\n  state = {\r\n    countries: null,\r\n    mapCenter: { lat: 34.80746, lng: -40.4796 },\r\n    countryInfo: {},\r\n    mapZoom: 3,\r\n    countryCode: \"worldwide\",\r\n    caseType: \"cases\",\r\n    mapCountries: [],\r\n    tableData: [],\r\n  };\r\n  getCountriesInfo = async () => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ countryInfo: data });\r\n      });\r\n  };\r\n  getCountries = async () => {\r\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const countries = data.map((country) => ({\r\n          name: country.country,\r\n          value: country.countryInfo.iso2,\r\n        }));\r\n        let sortedData = sortData(data);\r\n        this.setState({\r\n          countries: countries,\r\n          mapCountries: data,\r\n          tableData: sortedData,\r\n        });\r\n      });\r\n  };\r\n\r\n  onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          countryCode: countryCode,\r\n          countryInfo: data,\r\n          mapCenter: [data.countryInfo.lat, data.countryInfo.long],\r\n          mapZoom: 4,\r\n        });\r\n      });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.getCountries();\r\n    await this.getCountriesInfo();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.countries === null) return <h1>Loading</h1>;\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"app__left\">\r\n          <div className=\"app__header\">\r\n            <h1>Covid Tracker</h1>\r\n            <Form>\r\n              <Form.Group className=\"app__dropdown\" controlId=\"app_dropdown\">\r\n                <Form.Control as=\"select\" onChange={this.onCountryChange}>\r\n                  <option>Worldwide</option>\r\n                  {this.state.countries.map((country) => {\r\n                    return (\r\n                      <option key={country.name} value={country.value}>\r\n                        {country.name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form>\r\n          </div>\r\n\r\n          {/*Title */}\r\n          {/*Total Active */}\r\n\r\n          <div className=\"app__stats\">\r\n            {/*cases card */}\r\n            <InfoCard\r\n              onClick={(e) => this.setState({ caseType: \"cases\" })}\r\n              title=\"Coronavirus Cases\"\r\n              isRed\r\n              active={this.state.caseType === \"cases\"}\r\n              cases={prettyPrintStat(this.state.countryInfo.todayCases)}\r\n              total={numeral(this.state.countryInfo.cases).format(\"0.0a\")}\r\n            />\r\n            {/*Total recovered cases */}\r\n            <InfoCard\r\n              onClick={(e) => this.setState({ caseType: \"recovered\" })}\r\n              title=\"Recovered\"\r\n              active={this.state.caseType === \"recovered\"}\r\n              cases={prettyPrintStat(this.state.countryInfo.todayRecovered)}\r\n              total={numeral(this.state.countryInfo.recovered).format(\"0.0a\")}\r\n            />\r\n            {/*Total death rates */}\r\n            <InfoCard\r\n              onClick={(e) => this.setState({ caseType: \"deaths\" })}\r\n              title=\"Deaths\"\r\n              isRed\r\n              active={this.state.caseType === \"deaths\"}\r\n              cases={prettyPrintStat(this.state.countryInfo.todayDeaths)}\r\n              total={numeral(this.state.countryInfo.deaths).format(\"0.0a\")}\r\n            />\r\n          </div>\r\n\r\n          {/*Map */}\r\n          <Map\r\n            countries={this.state.mapCountries}\r\n            casesType={this.state.caseType}\r\n            center={this.state.mapCenter}\r\n            zoom={this.state.mapZoom}\r\n          />\r\n        </div>\r\n        <Card className=\"app__right\">\r\n          <Card.Body>\r\n            {/*  <div className=\"app__information\">\r\n              <h3>Live Cases by Country</h3>\r\n             \r\n                <Table countries={this.state.tableData} />\r\n               <h3>Worldwide new {this.state.caseType}</h3>\r\n              \r\n               <LineGraph casesType={this.state.caseType} \r\n           </div>*/}\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}